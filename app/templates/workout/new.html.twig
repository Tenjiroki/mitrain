
{# templates/workout/new.html.twig #}
{% extends 'base.html.twig' %}

{% block title %}New Workout{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        .exercise-form-wrapper {
            border: 1px solid #dee2e6;
            border-radius: 0.375rem;
            margin-bottom: 1rem;
            padding: 1rem;
            background-color: #f8f9fa;
        }
        .sets-container {
            background-color: white;
            border-radius: 0.375rem;
            padding: 0.5rem;
            margin-bottom: 1rem;
        }
        .set-form-wrapper {
            display: flex;
            align-items-center;
            gap: 0.5rem;
            margin-bottom: 0.5rem;
            padding: 0.5rem;
            border: 1px solid #e9ecef;
            border-radius: 0.25rem;
        }
        .set-inputs {
            display: flex;
            gap: 0.5rem;
            flex: 1;
        }
        .set-inputs input {
            flex: 1;
            min-width: 80px;
        }
        .form-check {
            margin-bottom: 0;
        }
        .form-check-input {
            margin-top: 0;
        }
        .btn-remove {
            background-color: #dc3545;
            color: white;
            border: none;
            padding: 0.25rem 0.5rem;
            border-radius: 0.25rem;
            font-size: 0.875rem;
        }
        .btn-add {
            background-color: #28a745;
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 0.25rem;
        }
        .sets-section {
            margin-top: 1rem;
        }
    </style>
{% endblock %}

{% block body %}
<div class="container">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1>New Workout</h1>
        <a href="{{ path('workout_index') }}" class="btn btn-outline-secondary">Back to Workouts</a>
    </div>

    {{ form_start(form, {'attr': {'id': 'workout-form'}}) }}
        <div class="row mb-4">
            <div class="col-md-6">
                {{ form_row(form.name) }}
            </div>
            <div class="col-md-6">
                {{ form_row(form.date) }}
            </div>
        </div>
        
        <div class="mb-4">
            {{ form_row(form.notes) }}
        </div>

        <div class="exercises-section">
            <h3>Exercises</h3>
            <div id="workout-exercises" 
                 data-prototype="{{ form_widget(form.workoutExercises.vars.prototype)|e('html_attr') }}"
                 data-index="{{ form.workoutExercises|length > 0 ? form.workoutExercises|length : 0 }}">
                {% for workoutExercise in form.workoutExercises %}
                    {{ include('workout/_exercise_form.html.twig', {'exerciseForm': workoutExercise}) }}
                {% endfor %}
            </div>
            <button type="button" id="add-exercise" class="btn btn-add mb-3">
                <i class="bi bi-plus-lg"></i> Add Exercise
            </button>
        </div>

        <div class="d-flex gap-2">
            <button type="submit" class="btn btn-primary">Save Workout</button>
            <a href="{{ path('workout_index') }}" class="btn btn-outline-secondary">Cancel</a>
        </div>
    {{ form_end(form) }}
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const exercisesContainer = document.getElementById('workout-exercises');
    const addExerciseBtn = document.getElementById('add-exercise');
    let exerciseIndex = parseInt(exercisesContainer.dataset.index);

    function updateSetPrototypes(exerciseElement, exerciseIdx) {
        const setsContainer = exerciseElement.querySelector('.sets-container');
        if (setsContainer && setsContainer.dataset.prototype) {
            // Update the sets prototype to use the correct exercise index
            const originalPrototype = setsContainer.dataset.prototype;
            const updatedPrototype = originalPrototype.replace(/workout_workoutExercises___name__/g, `workout_workoutExercises_${exerciseIdx}`);
            setsContainer.dataset.prototype = updatedPrototype;
        }
    }

    // Add exercise functionality
    addExerciseBtn.addEventListener('click', function() {
        const prototype = exercisesContainer.dataset.prototype;
        const newForm = prototype.replace(/__name__/g, exerciseIndex);
        
        const wrapper = document.createElement('div');
        wrapper.innerHTML = newForm;
        const newExerciseElement = wrapper.firstElementChild;
        
        // Update the sets prototype for this new exercise
        updateSetPrototypes(newExerciseElement, exerciseIndex);
        
        exercisesContainer.appendChild(newExerciseElement);
        
        exerciseIndex++;
        exercisesContainer.dataset.index = exerciseIndex;
    });

    // Handle exercise removal
    exercisesContainer.addEventListener('click', function(e) {
        if (e.target.classList.contains('remove-exercise')) {
            e.preventDefault();
            e.target.closest('.exercise-form-wrapper').remove();
        }
    });

    // Handle set addition
    exercisesContainer.addEventListener('click', function(e) {
        if (e.target.classList.contains('add-set')) {
            e.preventDefault();
            
            // Find the sets container for this exercise
            const exerciseWrapper = e.target.closest('.exercise-form-wrapper');
            const setsContainer = exerciseWrapper.querySelector('.sets-container');
            
            if (setsContainer && setsContainer.dataset.prototype) {
                const prototype = setsContainer.dataset.prototype;
                const setIndex = setsContainer.querySelectorAll('.set-form-wrapper').length;
                
                // Replace the set index placeholder
                const newSet = prototype.replace(/__name__/g, setIndex);
                
                const wrapper = document.createElement('div');
                wrapper.innerHTML = newSet;
                setsContainer.appendChild(wrapper.firstElementChild);
            }
        }
    });

    // Handle set removal
    exercisesContainer.addEventListener('click', function(e) {
        if (e.target.classList.contains('remove-set')) {
            e.preventDefault();
            e.target.closest('.set-form-wrapper').remove();
        }
    });

    // Initialize existing exercises
    exercisesContainer.querySelectorAll('.exercise-form-wrapper').forEach((exerciseElement, index) => {
        updateSetPrototypes(exerciseElement, index);
    });
});
</script>
{% endblock %}